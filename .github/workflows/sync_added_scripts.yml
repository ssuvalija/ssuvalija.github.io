name: Sync Newly Created Browser Monitor Scripts to Sematext Cloud 
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 5 

      - name: Detect changed files
        id: changed-files
        uses: tj-actions/changed-files@v13.1

      - name: Send newly created scripts to Sematext Cloud (Action will create Browser monitor for each added script)
        env:
          SC_API_BASE_URL: ${{ secrets.SC_API_BASE_URL }}
          SC_API_KEY: ${{ secrets.SC_API_KEY }}
        run: |

          filesArray=()
          for file in "${{ steps.changed-files.outputs.added_files }}"; do
            filesArray+=("$file")
          done

          for file in "${{ steps.changed-files.outputs.renamed_files }}"; do 
            filesArray+=("$file")
          done

          errors=()

          length=${#filesArray[@]}

          if [ $length == 0 ]; then
            echo 'No added files found.'
            export SKIP_COMMIT=1
          fi

          echo 'Files to be synced:'
          for file in "${filesArray[@]}"; do
            if [[ $file == *"browser_monitor_scripts"* ]]; then
              script_content=$( base64 -w 0 "$file" )

              #get app ID 
              line=$( head -n 1 "$file" )
              IFS='=' read -r -a app_id <<< "$line"

              length=${#app_id[@]}
              if [ $length != 2 ]; then
                  echo '::warning:: App ID must be specified on the first line using the format //appId=1'
                  errors+=("$file")
                  continue
              fi

              app_id=${app_id[1]}

              #remove whitespaces
              app_id="$(echo -e "${app_id}" | tr -d '[[:space:]]')"

              #create request body with default values

              IFS='/' read -r -a file_name_parsed <<< "$file"
              index=${#file_name_parsed[@]}-1
              name=${file_name_parsed[$index]}
              scriptBased=true
              enabled=true
              isGitHubSync=true
              #TODO replace location id, for prod it should be 1 instead of 3
              body='{"name":"'$name'","interval":"1h","locations":[3],"scriptBased":'$scriptBased',"enabled":'$enabled',"script":"'$script_content'","isGitHubSync":'$isGitHubSync'}'

              api_url=${SC_API_BASE_URL}'/synthetics-api/api/v3/apps/'${app_id}'/monitors/browser'

                curl --location --request POST ${api_url} \
                  --header 'authorization: apiKey '${SC_API_KEY} \
                    --header 'Content-Type: application/json' \
                      --data-raw "$body" > result.txt

                cat result.txt
                if [ $(head -1 result.txt | grep -c '"success":false') -ne 0 ]; then
                  echo '::warning:: Sync script API request failed';
                  errors+=("$file")
                  break
                else
                  #update file with app ID and monitor ID comment so it can be synced later when update occurs
                  first_line=$( head -1 result.txt )
                  monitor_id=`echo $first_line | jq '.data.id'`
                  comment='\/\/appId='$app_id';monitorId='$monitor_id''
                  sed -i "1s/.*/$comment/" "$file"

                  export SKIP_COMMIT=0
                fi
            fi
          done
      - name: Commit files # commit updated scripts with comment //app_id=x;monitor_id=y
        run: |
          echo "skip commit=========="
          echo $SKIP_COMMIT
          if [ $SKIP_COMMIT -eq 0 ]; then
            git config --local user.name "Sematext-sync-scripts-bot"
            git add ./browser_monitor_scripts
            git commit -m "Updating scripts"
          fi
      - name: Push changes 
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true
